// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int         @id @default(autoincrement())
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  username            String      @unique
  hashedPasswd        String
  salt                String
  TFAMode             Boolean
  email               String
  TFACode             String
  TFAExpiresAt        String
  profilePicture      String
  sessions            Session[]
  scores              Score[]
  ratings             Rating[]
  // messages            Message[]
  // rooms               Room[]

  @@map("users")
}

model Session {
  id                  Int         @id @default(autoincrement())
  userId              Int
  user                User        @relation(fields: [userId], references: [id])
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  expiresAt           DateTime
  jwtToken            String      @unique
  serializedCookie    String      @unique
  hashedCookie        String      @unique

  @@map("sessions")
}

model Score {
  id                 Int         @id @default(autoincrement())
  userId             Int
  user               User        @relation(fields: [userId], references: [id])
  enemyName          String
  score              String
  win                Boolean
  gameTime           DateTime    @default(now())
   
 @@map("scores")
}

  
model Rating {
  id                 Int         @id @default(autoincrement())
  userId             Int         @unique
  user               User        @relation(fields: [userId], references: [id])
  username           String      @unique
  totalMatches       Int
  wins               Int
  losses             Int
  rank               Int

  @@map("ratings")
}

// model Message {
//   id                    Int   @id @default(autoincrement())
//   roomId                Int ---> get it from chat websocket!
//   createdAt             DateTime @default(now())
//   value                 String
//   userId                Int
//   user                  User  @relation(fields: [user_id], references: [id])
//   @@map("messages")
// }

// model Room {          
//   id                    Int     @id @default(autoincrement())
//   userId                Int
//   user                  User    @relation(fields: [userId], references: [id])
//   @@map("rooms")
// }
