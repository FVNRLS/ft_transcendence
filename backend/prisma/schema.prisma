// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int         @id @default(autoincrement())
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  username            String      @unique
  hashedPasswd        String
  salt                String
  TFAMode             Boolean
  email               String
  TFACode             String
  TFAExpiresAt        String
  profilePicture      String
  sessions            Session[]
  scores              Score[]
  ratings             Rating[]
  friends             Friend[]
  messages            Message[]
  sentMessages        DirectMessage[] @relation("DirectMessageSender")
  receivedMessages    DirectMessage[] @relation("DirectMessageReceiver")
  userrooms           UserOnRooms[]

  @@map("users")
}

model Session {
  id                  Int         @id @default(autoincrement())
  userId              Int
  user                User        @relation(fields: [userId], references: [id])
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  expiresAt           DateTime
  jwtToken            String      @unique
  serializedCookie    String      @unique
  hashedCookie        String      @unique
  token42             String

  @@map("sessions")
}

model Score {
  id                 Int         @id @default(autoincrement())
  userId             Int
  user               User        @relation(fields: [userId], references: [id])
  enemyName          String
  score              String
  win                Boolean
  gameTime           DateTime    @default(now())
   
 @@map("scores")
}
  
model Rating {
  id                 Int         @id @default(autoincrement())
  userId             Int         @unique
  user               User        @relation(fields: [userId], references: [id])
  username           String      @unique
  totalMatches       Int
  wins               Int
  losses             Int
  rank               Int

  @@map("ratings")
}

model Friend {
  id                 Int          @id @default(autoincrement())
  userId             Int
  user               User         @relation(fields: [userId], references: [id])
  friendId           Int
  friendName         String
  status             String   // Status of the friendship (e.g. "pending", "accepted")

  @@map("friends")
}

model UserOnRooms {
  id        Int      @id @default(autoincrement())
  roomId    Int
  room      Room     @relation(fields: [roomId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])

  @@unique([roomId, userId])
  @@map("useronrooms")
}



model Room {          
  id                    Int       @id @default(autoincrement())
  roomName              String
  userId                Int
  messages              Message[]
  userOnRooms           UserOnRooms[]

  @@map("rooms")
}

model Message {
  id                    Int       @id @default(autoincrement())
  userId                Int
  user                  User      @relation(fields: [userId], references: [id])
  roomId                Int
  room                  Room      @relation(fields: [roomId], references: [id])
  createdAt             DateTime  @default(now())
  content               String
  
  @@map("messages")
}

model DirectMessage {
  id         Int       @id @default(autoincrement())
  senderId   Int
  sender     User      @relation("DirectMessageSender", fields: [senderId], references: [id])
  receiverId Int
  receiver   User      @relation("DirectMessageReceiver", fields: [receiverId], references: [id])
  createdAt  DateTime  @default(now())
  content    String

  @@map("directmessages")
}
